<?xml version="1.0" encoding="UTF-8"?>

<!-- Syntax highlighting for the under-development Mozilla Rust language -->

<language id="rust" _name="Rust" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-rust</property>
    <property name="globs">*.rs;*.rc</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="preprocessor"      _name="Preprocessor"          map-to="def:preprocessor"/>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="char" _name="Character" map-to="def:character"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="constant" _name="Constant" map-to="def:constant"/>
    <style id="identifier" _name="Identifier" map-to="def:identifier"/>
    <style id="number" _name="Number" map-to="def:number"/>
    <style id="scope" _name="Scope" map-to="def:scope"/>
    <style id="attribute" _name="Attribute" map-to="def:preprocessor"/>
    <style id="operator"          _name="Operator"              map-to="def:keyword"/>
    <style id="op"          _name="Ops"              map-to="def:operator"/>
    <style id="delimiter"          _name="Delimeter"              map-to="def:delimiter"/>
    <style id="blockdef"          _name="blockdef"              map-to="def:special-char"/>
    <style id="typeparams"          _name="TypeParams"              map-to="def:typeparam"/>
    <style id="typedecl"          _name="TypeDecl"              map-to="xml:attribute-name"/>
    <style id="typeref"          _name="TypeRef"              map-to="def:type"/>
    <style id="tuple2"          _name="tuple2"              map-to="def:type"/>
    <style id="struct-init"          _name="StructInit"              map-to="xml:type"/>
    <style id="definition"          _name="Definition"              map-to="def:definition"/>
    <style id="stdlib"          _name="StdLib"              map-to="def:stdfunction"/>
    <style id="gl"          _name="GL"              map-to="def:stdfunction"/>
    <style id="vec_math"          _name="VecMath"              map-to="def:stdfunction"/>
 </styles>

  <definitions>
	<define-regex id="preproc-start">^\s*#\s*</define-regex>
	<define-regex id="typeref">:\s*</define-regex>

	<context id="function" style-ref="keyword">
		<keyword>fn</keyword>
	</context>


	<context id="type" style-ref="keyword">
		<keyword>type</keyword>
	</context>


	<context id="keywords" style-ref="keyword">
		<keyword>as</keyword>
		<keyword>assert</keyword>
		<keyword>break</keyword>
		<keyword>const</keyword>
		<keyword>copy</keyword>
		<keyword>do</keyword>
		<keyword>drop</keyword>
		<keyword>else</keyword>
		<keyword>enum</keyword>
		<keyword>export</keyword>
		<keyword>extern</keyword>
		<keyword>fail</keyword>
		<keyword>for</keyword>
		<keyword>if</keyword>
		<keyword>impl</keyword>
		<keyword>let</keyword>
		<keyword>log</keyword>
		<keyword>loop</keyword>
		<keyword>match</keyword>
		<keyword>mod</keyword>
		<keyword>move</keyword>
		<keyword>mut</keyword>
		<keyword>priv</keyword>
		<keyword>pub</keyword>
		<keyword>pure</keyword>
		<keyword>ref</keyword>
		<keyword>return</keyword>
		<keyword>static</keyword>
		<keyword>struct</keyword>
		<keyword>trait</keyword>
		<keyword>unsafe</keyword>
		<keyword>use</keyword>
		<keyword>while</keyword>
	</context>

	<context id="types" style-ref="type">
		<keyword>bool</keyword>
		<keyword>int</keyword>
		<keyword>uint</keyword>
		<keyword>i8</keyword>
		<keyword>i16</keyword>
		<keyword>i32</keyword>
		<keyword>i64</keyword>
		<keyword>u8</keyword>
		<keyword>u16</keyword>
		<keyword>u32</keyword>
		<keyword>u64</keyword>
		<keyword>f32</keyword>
		<keyword>f64</keyword>
		<keyword>float</keyword>
		<keyword>char</keyword>
		<keyword>str</keyword>
		<keyword>Either</keyword>
		<keyword>Option</keyword>
		<keyword>Result</keyword>
	</context>

	<context id="ctypes" style-ref="type">
		<keyword>c_float</keyword>
		<keyword>c_double</keyword>
		<keyword>c_void</keyword>
		<keyword>FILE</keyword>
		<keyword>fpos_t</keyword>
		<keyword>DIR</keyword>
		<keyword>dirent</keyword>
		<keyword>c_char</keyword>
		<keyword>c_schar</keyword>
		<keyword>c_uchar</keyword>
		<keyword>c_short</keyword>
		<keyword>c_ushort</keyword>
		<keyword>c_int</keyword>
		<keyword>c_uint</keyword>
		<keyword>c_long</keyword>
		<keyword>c_ulong</keyword>
		<keyword>size_t</keyword>
		<keyword>ptrdiff_t</keyword>
		<keyword>clock_t</keyword>
		<keyword>time_t</keyword>
		<keyword>c_longlong</keyword>
		<keyword>c_ulonglong</keyword>
		<keyword>intptr_t</keyword>
		<keyword>uintptr_t</keyword>
		<keyword>off_t</keyword>
		<keyword>dev_t</keyword>
		<keyword>ino_t</keyword>
		<keyword>pid_t</keyword>
		<keyword>mode_t</keyword>
		<keyword>ssize_t</keyword>
	</context>

	<context id="gl" style-ref="gl">
		<match>\bgl\w*|GL_\w*</match>
	</context>
	<context id="vec_math" style-ref="vec_math">
		<match>\bvec[A-Z0-9]\w*|\bVec[A-Z0-9]\w*|\bv[0-4]f[A-Z]\w*|\bmatrix\w*|\bMatrix\w*|\bmat[_A-Z0-9]\w*|\bMat[A-Z0-9_]\w*</match>
	</context>

	<context id="stdlib" style-ref="stdlib">
		<!-- todo: automate this! -->
		<keyword>map</keyword>
		<keyword>to_str</keyword>
		<keyword>fold</keyword>
		<keyword>filter</keyword>
		<keyword>foldl</keyword>
		<keyword>foldr</keyword>
		<keyword>println</keyword>
		<keyword>print</keyword>
		<keyword>spawn</keyword>
		<keyword>times</keyword>
		<keyword>forever</keyword>
		<keyword></keyword>
		<keyword>iter</keyword>
		<keyword>collect</keyword>
		<keyword>each</keyword>
		<keyword>flat_map</keyword>
		<keyword>as_str</keyword>
		<keyword>assert!</keyword>
		<keyword>verify!</keyword>
		<keyword>debug!</keyword>
		<keyword>dump!</keyword>
		<keyword>advance</keyword>
		<keyword>new</keyword>
		<keyword>advance</keyword>
		<keyword>max_by</keyword>
		<keyword>min_by</keyword>
		<keyword>contains</keyword>
		<keyword>slice</keyword>
		<keyword>len</keyword>
		<keyword>head</keyword>
		<keyword>first</keyword>
		<keyword>last</keyword>
		<keyword>rev_iter</keyword>
		<keyword>filter_mapped</keyword>
		<keyword>min_by</keyword>
		<keyword>reverse</keyword>
		<keyword>append</keyword>
		<keyword>reserve</keyword>
		<keyword>capacity</keyword>
		<keyword>grow</keyword>
		<keyword>push</keyword>
		<keyword>pop</keyword>
		<keyword>partition</keyword>
	</context>

	<context id="self" style-ref="identifier">
		<keyword>self</keyword>
	</context>

	<context id="operators" style-ref="operator">
	  <keyword>sizeof</keyword>

	</context>

	<context id="constants" style-ref="constant">
		<keyword>true</keyword>
		<keyword>false</keyword>
		<keyword>Some</keyword>
		<keyword>None</keyword>
		<keyword>Left</keyword>
		<keyword>Right</keyword>
		<keyword>Ok</keyword>
		<keyword>Err</keyword>
		<keyword>Success</keyword>
		<keyword>Failure</keyword>
		<keyword>Cons</keyword>
		<keyword>Nil</keyword>
	</context>
	<context id="cconstants" style-ref="constant">
		<keyword>EXIT_FAILURE</keyword>
		<keyword>EXIT_SUCCESS</keyword>
		<keyword>RAND_MAX</keyword>
		<keyword>EOF</keyword>
		<keyword>SEEK_SET</keyword>
		<keyword>SEEK_CUR</keyword>
		<keyword>SEEK_END</keyword>
		<keyword>_IOFBF</keyword>
		<keyword>_IONBF</keyword>
		<keyword>_IOLBF</keyword>
		<keyword>BUFSIZ</keyword>
		<keyword>FOPEN_MAX</keyword>
		<keyword>FILENAME_MAX</keyword>
		<keyword>L_tmpnam</keyword>
		<keyword>TMP_MAX</keyword>
		<keyword>O_RDONLY</keyword>
		<keyword>O_WRONLY</keyword>
		<keyword>O_RDWR</keyword>
		<keyword>O_APPEND</keyword>
		<keyword>O_CREAT</keyword>
		<keyword>O_EXCL</keyword>
		<keyword>O_TRUNC</keyword>
		<keyword>S_IFIFO</keyword>
		<keyword>S_IFCHR</keyword>
		<keyword>S_IFBLK</keyword>
		<keyword>S_IFDIR</keyword>
		<keyword>S_IFREG</keyword>
		<keyword>S_IFMT</keyword>
		<keyword>S_IEXEC</keyword>
		<keyword>S_IWRITE</keyword>
		<keyword>S_IREAD</keyword>
		<keyword>S_IRWXU</keyword>
		<keyword>S_IXUSR</keyword>
		<keyword>S_IWUSR</keyword>
		<keyword>S_IRUSR</keyword>
		<keyword>F_OK</keyword>
		<keyword>R_OK</keyword>
		<keyword>W_OK</keyword>
		<keyword>X_OK</keyword>
		<keyword>STDIN_FILENO</keyword>
		<keyword>STDOUT_FILENO</keyword>
		<keyword>STDERR_FILENO</keyword>
	</context>

	<context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
	  <start>//</start>
	  <include>
	    <context ref="def:in-line-comment"/>
	  </include>
	</context>

	<context id="block-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
	  <start>/\*</start>
	  <end>\*/</end>
	  <include>
	    <context ref="def:in-comment"/>
	  </include>
	</context>

	<context id="number" style-ref="number">
	  <match extended="true">
	    (?&lt;![\w\.])
	    (
	    0x[0-9a-fA-F_]+(u8|u16|u32|u64|i8|i16|i32|i64|u|i)?|
	    0b[0-1_]+(u8|u16|u32|u64|i8|i16|i32|i64|u|i)?|
	    [0-9][0-9_]*\.[0-9_]*([eE][+-]?[0-9_]+)?(f32|f64|f)?|
	    [0-9][0-9_]*(u8|u16|u32|u64|i8|i16|i32|i64|u|i)?
	    )
	    (?![\w\.])
	  </match>
	</context>

	<define-regex id="ident" extended="true">
	  ([^[:cntrl:][:space:][:punct:][:digit:]]|_)([^[:cntrl:][:punct:][:space:]]|_)*
	</define-regex>

	<context id="scope" style-ref="scope">
	  <match extended="true">
	    \%{ident}::
	  </match>
	</context>

	<context id="lifetime" style-ref="keyword">
	  <match extended="true">
	    '\%{ident}
	  </match>
	</context>

	<context id="string" style-ref="string" class="string" class-disabled="no-spell-check">
	  <start>"</start>
	  <end>"</end>
	  <include>
	    <context ref="def:escape"/>
	    <context ref="def:line-continue"/>
	  </include>
	</context>

	<define-regex id="hex_digit" extended="true">
	  [0-9a-fA-F]
	</define-regex>

	<define-regex id="common_escape" extended="true">
	  (n|r|t)|
	  x\%{hex_digit}{2}|
	  u\%{hex_digit}{4}|
	  U\%{hex_digit}{8}
	</define-regex>

	<context id="char" style-ref="char" class="char">
	  <match extended="true">'([^\\]|\\\%{common_escape})'</match>
	</context>

	<context id="attribute" style-ref="attribute" class="attribute">
	  <match extended="true">\#\[[^\]]+\]</match>
	</context>

	<context id="delimiter" style-ref="delimiter">
		<match extended="true">;|\]|,|\{|\}|\[|\-&gt;|=&gt;|</match>
	</context>
	<context id="typeparams" style-ref="typeparams">
	  <match extended="true">&lt;[^\(\)]*&gt;</match>
	</context>
	<context id="definition" style-ref="definition">
	  <match extended="true">\b(enum|fn|struct|trait|impl)\s+\w+</match>
	</context>
	<context id="typeref" style-ref="typeref">
	  <match extended="true">:\s*[^,\{\}\;\=\)\(]*</match>
	</context>
	<context id="tuple2" style-ref="tuple2">
		<match extended="true">:\s*\([^:=\{\}]*\)</match> 
<!--
		<match extended="true">:\s*\(\s*[^\{\}:;=]*\s*,\s*[^\{\}:;=]*\\s*\)</match> 
-->
	</context>
	<context id="op" style-ref="op">
		<match extended="true">
		~|@|=|\*|\+|\-|\?|/|
		\^|\|=|==|\!=|$|\||\!|
		&amp;|
		\^|
		\|\||
		&amp;&amp;|
		&gt;=|
		&lt;=|
		&gt;|
		\!|
		\+=|
		\-=|
		\*=|
		\/=|
		\|=|
		\&amp;=|
		&lt;&lt;|
		&gt;&gt;|
		\-=;|
		\.
		</match>		
	</context>
	<context id="blockdef" style-ref="blockdef">
		<match extended="true">
			\|\w\||
			\|&amp;\w\||
			\|\w*,\w*\|
			\|\w*,\w*\,\w*|
			\|\(\w*,\w*\)\|
		</match>
	</context>

	<context id="struct-init" style-ref="struct-init">
      <start>\w*\s*\{</start>
	  <end>\}</end>
      <include>
       <context ref="rust"/>
      </include>
	</context>

	<context id="rust" class="no-spell-check">
	  <include>
	    <context ref="definition"/>
	    <context ref="keywords"/>
	    <context ref="line-comment"/>
	    <context ref="block-comment"/>
	    <context ref="tuple2"/>
	    <context ref="type"/>
	    <context ref="delimiter"/>
	    <context ref="op"/>
	    <context ref="function"/>
	    <context ref="types"/>
	    <context ref="ctypes"/>
	    <context ref="self"/>
	    <context ref="constants"/>
	    <context ref="cconstants"/>
	    <context ref="number"/>
	    <context ref="scope"/>
	    <context ref="string"/>
	    <context ref="char"/>
	    <context ref="lifetime"/>
	    <context ref="attribute"/>
	    <context ref="typeref"/>
	    <context ref="typeparams"/>
	    <context ref="stdlib"/>
	    <context ref="gl"/>
	    <context ref="vec_math"/>
	  </include>
	</context>
  </definitions>

</language>
